---
import { useStoryblokApi } from "@storyblok/astro";
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";

const storyblokApi = useStoryblokApi();
const { data } = await storyblokApi.get("cdn/stories/home", {
	version: "draft",
});

let storyId = "";

// Override the original Story data with date coming from the editor through middleware.js
if (Astro.locals["_storybook_preview_data"]) {
	data.story = Astro.locals["_storybook_preview_data"];
	storyId = data.story.id;
}

const story = data.story;
---

<html lang='en'>
	<head>
		<script></script>
		<meta charset='UTF-8' />
		<meta name='viewport' content='width=device-width' />
		<link rel='icon' type='image/x-icon' href='/favicon.ico' />
		<title>The Storyblok Astro Ultimate Tutorial: Part 1</title>

		<script>
			import { setupLoadListener } from "./storyblok-preview/iframe-manager.js";
			import { setupMessageInterceptor } from "./storyblok-preview/event-handler.js";
			setupLoadListener();
			setupMessageInterceptor();
		</script>
		<script define:vars={{ storyId }}>
			// This block is needed to let Storyblok manager work, as it is looking for the parameter in the URL
			if (storyId) {
				// if location.search doesn't contain _storyblok, add it
				if (!location.search.includes("_storyblok")) {
					// if it doesn't contain any query params, add _storyblok
					if (!location.search) {
						location.search = `_storyblok=${storyId}`;
					} else {
						// if it contains other query params, add _storyblok after the first one
						location.search = location.search.replace(
							"?",
							`?_storyblok=${storyId}&`
						);
					}
				}
			}
		</script>
		<script>
			import { loadStoryblokBridge } from "@storyblok/js";

			console.log("Storyblok Bridge initialized");
			loadStoryblokBridge().then(() => {
				const { StoryblokBridge, location } = window;
				const storyblokInstance = new StoryblokBridge();

				storyblokInstance.on(
					[
						"published",
						"change",
						"input",
						"enterEditmode",
						"customEvent",
						"unpublished",
					],
					(event) => {
						// I've dispatched events here, but they didn't seem to be necessary.
						return;
					}
				);
			});
		</script>
	</head>
	<body class='container mx-auto'>
		<StoryblokComponent blok={story.content} />
	</body>
</html>
